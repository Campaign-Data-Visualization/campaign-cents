{
  "name": "google-oauth-jwt",
  "version": "0.0.4",
  "author": {
    "name": "Nicolas Mercier",
    "email": "nicolas@extrabacon.net"
  },
  "description": "Implementation of Google OAuth 2.0 for server-to-server interactions, allowing secure use of Google APIs without interaction from an end-user.",
  "keywords": [
    "google",
    "api",
    "oauth",
    "oauth2",
    "service account",
    "jwt",
    "token",
    "server to server"
  ],
  "dependencies": {
    "request": "*"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/extrabacon/google-oauth-jwt"
  },
  "homepage": "http://github.com/extrabacon/google-oauth-jwt",
  "bugs": {
    "url": "http://github.com/extrabacon/google-oauth-jwt/issues"
  },
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# google-oauth-jwt\n\nGoogle OAuth 2.0 authentication for server-to-server applications with Node.js.\n\nThis library generates [JWT](http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html) tokens to establish\nidentity to an API, without an end-user being involved. This is the preferred scenario for server-side communications.\nIt can be used to interact with Google APIs requiring access to user data (such as Google Drive, Calendar, etc.) for\nwhich URL-based callbacks and user authorization prompts are not appropriate.\n\nTokens are generated for a service account, which is created from the Google API console. Service accounts must also\nbe granted access to resources, using traditional assignation of permissions using the unique service account email\naddress.\n\nThe authentication process is implemented following the specifications found\n[here](https://developers.google.com/accounts/docs/OAuth2ServiceAccount).\n\nThe package also integrates with [request](https://github.com/mikeal/request) to seamlessly query Google RESTful APIs,\nwhich is optional. Integration with [request](https://github.com/mikeal/request) provides automatic requesting of\ntokens, as well as built-in token caching.\n\n## Documentation\n\n### Installation\n```bash\nnpm install google-oauth-jwt\n```\n\n### Generating a key to sign the tokens\n\n1. From the [Google API Console](https://code.google.com/apis/console/), create a\n  [service account](https://developers.google.com/console/help/#service_accounts).\n\n2. Download the generated P12 key.\n\n   IMPORTANT: keep a copy of the key, Google keeps only the public key.\n\n3. Convert the key to PEM, so we can use it from the Node crypto module.\n\n   To do this, run the following in Terminal:\n   ```bash\n   openssl pkcs12 -in downloaded-key-file.p12 -out your-key-file.pem -nodes\n   ```\n\n   The password for the key is `notasecret`, as mentioned when you downloaded the key.\n\n### Granting access to resources to be requested through an API\n\nIn order to query resources using the API, access must be granted to the service account. Each Google application that\nhas security settings must be configured individually. Access is granted by assigning permissions to the service\naccount, using its email address found in the API console.\n\nFor example, in order to list files in Google Drive, folders and files must be shared with the service account email\naddress. Likewise, to access a calendar, the calendar must be shared with the service account.\n\n### Querying a RESTful Google API with \"request\"\n\nIn this example, we use a modified instance of [request](https://github.com/mikeal/request) to query the\nGoogle Drive API. The modified request module handles the token automatically using a `jwt` setting passed to\nthe `request` function.\n\n```javascript\n// obtain a JWT-enabled version of request\nvar request = require('google-oauth-jwt').requestWithJWT();\n\nrequest({\n  url: 'https://www.googleapis.com/drive/v2/files',\n  jwt: {\n    // use the email address of the service account, as seen in the API console\n    email: 'my-service-account@developer.gserviceaccount.com',\n    // use the PEM file we generated from the downloaded key\n    keyFile: 'my-service-account-key.pem',\n    // specify the scopes you wish to access - each application has different scopes\n    scopes: ['https://www.googleapis.com/auth/drive.readonly']\n  }\n}, function (err, res, body) {\n\tconsole.log(JSON.parse(body));\n});\n```\n\nNote that the `options` object includes a `jwt` object we use to configure how to encode the JWT. The token will then\nautomatically be requested and inserted in the query string for this API call. It will also be cached and\nreused for subsequent calls using the same service account and scopes.\n\n### Requesting the token manually\n\nIf you wish to simply request the token for use with a Google API, use the `authenticate` method.\n\n```javascript\nvar googleAuth = require('google-oauth-jwt');\n\ngoogleAuth.authenticate({\n  // use the email address of the service account, as seen in the API console\n  email: 'my-service-account@developer.gserviceaccount.com',\n  // use the PEM file we generated from the downloaded key\n  keyFile: 'my-service-account-key.pem',\n  // specify the scopes you wish to access\n  scopes: ['https://www.googleapis.com/auth/drive.readonly']\n}, function (err, token) {\n  console.log(token);\n});\n```\n\nIf you want to use the built-in token cache, use the `TokenCache` class. Tokens are cached using the email address and\nthe scopes as the key.\n\n```javascript\nvar TokenCache = require('google-oauth-jwt').TokenCache,\n    tokens = new TokenCache();\n\ntokens.get({\n  // use the email address of the service account, as seen in the API console\n  email: 'my-service-account@developer.gserviceaccount.com',\n  // use the PEM file we generated from the downloaded key\n  keyFile: 'my-service-account-key.pem',\n  // specify the scopes you wish to access\n  scopes: ['https://www.googleapis.com/auth/drive.readonly']\n}, function (err, token) {\n  console.log(token);\n});\n```\n\nUsing `TokenCache` will request only one token for multiple concurrent requests to `get`. A new token request will\nautomatically be issued if the token is expired.\n\n### Encoding JWT manually\n\nIt is also possible to encode the JWT manually using the `encodeJWT` method.\n\n```javascript\nvar googleAuth = require('google-oauth-jwt');\n\ngoogleAuth.encodeJWT({\n  // use the email address of the service account, as seen in the API console\n  email: 'my-service-account@developer.gserviceaccount.com',\n  // use the PEM file we generated from the downloaded key\n  keyFile: 'my-service-account-key.pem',\n  // specify the scopes you which to access\n  scopes: ['https://www.googleapis.com/auth/drive.readonly']\n}, function (err, jwt) {\n  console.log(jwt);\n});\n```\n\n### Specifying options\n\nThe following options can be specified in order to generate the JWT:\n\n```javascript\nvar options = {\n\n  // the email address of the service account (required)\n  // this information is obtained via the API console\n  email: 'my-service-account@developer.gserviceaccount.com',\n\n  // an array of scopes uris to request access to (required)\n  // different scopes are available for each application (refer to the app documentation)\n  // scopes are NOT permission levels, but limitations applied to the API access\n  // so remember to also grant permissions for the application!\n  scopes: [...],\n\n  // the cryptographic key as a string, can be the contents of the PEM file\n  // the key will be used to sign the JWT and validated by Google OAuth\n  key: 'KEY_CONTENTS',\n\n  // the path to the PEM file to use for the cryptographic key (ignored if 'key' is also defined)\n  // the key will be used to sign the JWT and validated by Google OAuth\n  keyFile: 'path_to/key.pem',\n\n  // the duration of the requested token in milliseconds (optional)\n  // default is 1 hour (60 * 60 * 1000), which is the maximum allowed by Google\n  expiration: 3600000,\n\n  // if access is being granted on behalf of someone else, specifies who is impersonating the service account\n  delegationEmail: 'email_address@mycompany.com',\n\n  // turns on simple console logging for debugging\n  debug: false\n\n};\n```\n\nOptions are used to encode the JWT that will be sent to Google OAuth servers in order to issue a token that can then be\nused for the APIs.\n\nFor more information:\n[https://developers.google.com/accounts/docs/OAuth2ServiceAccount#formingclaimset](https://developers.google.com/accounts/docs/OAuth2ServiceAccount#formingclaimset)\n\n## Changelog\n\n* 0.0.4: fixed pending callbacks accumulating indefinitely in TokenCache\n* 0.0.3: introduction of TokenCache\n* 0.0.2: improved error handling and documentation\n* 0.0.1: initial version\n\n## Compatibility\n\n+ Tested with Node 0.8\n+ Tested on Mac OS X 10.8\n\n## Dependencies\n\n+ [request](https://github.com/mikeal/request)\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013, Nicolas Mercier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "google-oauth-jwt@0.0.4",
  "dist": {
    "shasum": "8fa51684a88ce7db636399d891419d665c8eb792"
  },
  "_from": "google-oauth-jwt@0.0.4",
  "_resolved": "https://registry.npmjs.org/google-oauth-jwt/-/google-oauth-jwt-0.0.4.tgz"
}
