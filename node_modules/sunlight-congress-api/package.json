{
  "name": "sunlight-congress-api",
  "version": "0.1.0",
  "author": {
    "name": "Matthew Chase Whittemore",
    "email": "mcwhittemore@gmail.com"
  },
  "description": "A simple wrapper for the Sunlight Congress API from the Sunlight Foundation",
  "contributors": [
    {
      "name": "Matthew Chase Whittemore",
      "email": "mcwhittemore@gmail.com"
    }
  ],
  "main": "./lib/main",
  "repository": {
    "type": "git",
    "url": "https://github.com/mcwhittemore/sunlight-congress-api.git"
  },
  "keywords": [
    "api",
    "congress",
    "sunlight foundation",
    "sunlight labs",
    "open government"
  ],
  "dependencies": {},
  "license": "MIT",
  "engines": {
    "node": ">=0.6"
  },
  "readme": "# Sunlight Congress API Wrapper\n\nA `node.js` wrapper for the [Sunlight Congress API](http://sunlightlabs.github.com/congress/) from the [Sunlight Foundation](http://sunlightfoundation.com/).\n\n# Installing\n\n\tnpm install sunlight-congress-api\n\n\n## Usage\n\n\tvar api = require(\"sunlight-congress-api\");\n\n\tvar success = function(data){\n\t\tconsole.log(data);\n\t}\n\n\tapi.init(\"SOMEAPIKEY\");\n\n\tapi.votes().filter(\"year\", \"2012\").call(success);\n\n## Demo\n\nA small demo is provided. After creating a config.js file, run `node run.js` in the demo folder to try it out.\n\n## API\n\n### Base Module\n\n#### init(apikey)\n\nSets the apikey for all endpoint modules created following. Also allows a user to direct requests to a custom server.\n\n\tapi.init(\"SOMEAPIKEY\");\n\n\tOR\n\n\tapi.init({\n\t\tkey: \"SOMEAPIKEY\",\n\t\turl: \"https://congress.api.sunlightfoundation.com/\"\n\t});\n\n#### clone(obj)\n\nClones whatever object it is passed into another object. Good for creating similar but different endpoint modules.\n\n\tvar votes2012 = api.votes()\n\t\t\t\t\t\t.filter(\"chamber\", \"house\")\n\t\t\t\t\t\t.filter(\"year\", \"2012\");\n\n\tvar votes2013 = api.clone(votes2012)\n\t\t\t\t\t\t.filter(\"year\", \"2013\");\n\n### Endpoints\n\nThere are currently 10 endpoints to the Sunlight Congress API.\n\n* bills: `bills()` provides info on legislation in the House and Senate, back to 2009. Updated daily.\n* bills/search: `billsSearch()` does a full text search over legislation.\n* committees: `committees()` lists current committees, subcommittees, and their membership.\n* districts/locate: `districtsLocate()` finds congressional districts for a latitude/longitude or zip.\n* floor_updates: `floorUpdates()` lists up-to-the-minute updates from the floor of the House and Senate.\n* hearings:\t`hearings()` lists committee hearings in Congress. Updated as hearings are announced.\n* legislators: `legislators()` brings up current legislators' names, IDs, biography, and social media.\n* legislators/locate: `legislatorsLocate()` finds representatives and senators for a latitude/longitude or zip.\n* upcoming_bills: `upcomingBills()` lists bills scheduled for debate in the future, as announced by party leadership.\n* votes: `votes()` provide access to roll call votes in Congress, back to 2009. Updated within minutes of votes.\n\n### Endpoint Wide Functions\n\n#### call(success, [failure])\n\nIssues a GET request to the API. Async calls success on success and failure on failure. If failure is not defined, a default console.log is used.\n\n\tapi.votes().call(function(data){ \n\t\tconsole.log(data.results.length);\n\t});\n\n* success: callback function on a successful call.\n* failure: callback function on a failed call. Defaults to console.log.\n\n#### explain()\n\nTurns on explain mode which add a JSON response with how the API interpreted the query, and database-specific explain information.\n\nThis is a convenience for debugging, not a \"supported\" API feature. Don't make automatic requests with explain mode turned on.\n\n\tapi.votes().explain();\n\n#### fields(field1, field2, ..., fieldN)\n\nProvides control over which fields to have Sunlight Congress API return to you. This is very helpful, as the API returns default fields only if this is not used.\n\nThis function takes any number of arguments. Each argument will be added the request string.\n\n\tapi.votes().fields(\"year\", \"chamber\") //returns the YEAR and CHAMBER fields from votes\n\n#### filter(field, value, [operator])\n\nAdds query parameter to quests. Allows for chaining.\n\n\tapi.votes().filter(\"year\", \"2012\"); // get all votes with year 2012\n\n* field: this is the field you want to filter on.\n* value: the value the field must eval to, to be returned.\n* operator: how to perform the eval. Defaults to =.\n\t* = - the field is equal to the value (default).\n\t* gt - the field is greater than this value\n\t* gte - the fiels is greater than or equal to this value\n \t* lt - the field is less than this value\n\t* lte - the field is less than or equal to this value\n\t* not - the field is not this value\n\t* all - the field is an array that contains all of these values (separated by \"|\")\n\t* in - the field is a string that is one of these values (separated by \"|\")\n\t* nin - the field is a string that is not one of these values (separated by \"|\")\n\t* exists - the field is both present and non-null (supply \"true\" or \"false\")\n\n#### getEndpoint()\n\nReturns the uri that would be called if call() was issued on the object.\n\n\tvar ep = api.districtsLocate().page(1, 10).getEndpoint();\n\tconsole.log(ep);\n\t//RESULT: http://congress.api.sunlightfoundation.com/districts/locate/?apikey=SOMEAPIKEY&per_page=10&page=1\n\n#### next(success, failure)\n\nIncrements page by 1 and then issues a call. If page has not been set it will increment it will call the first page.\n\n\tvar committees = api.committees();\n\tfor(var i=1; i<5; i++){\n\t\tcommittees.next(buildSuccess(\"COMMITTEESS PAGE \"+i));\n\t}\n\n* success: callback function on a successful call.\n* failure: callback function on a failed call. Defaults to console.log.\n\n#### order(field, [direction]) \n\nOverloaded options provided for objects and arrays, see below for examples.\n\nProvides control over the ordering of results. This is vital to pagination returns. \n\n\t//orders the result of votes by year from newest to oldest\n\tapi.votes().order(\"year\", \"desc\"); \n\n* field: which field to sort by.\n* direction: how to direct. Two options, desc and asc. Defaults to desc.\n\nIf you want to multi-order a call, use the order function twice or use one of the overloaded options.\n\n\t//orders the results by chamber from a to z and then by year from newest to oldest.\n\tapi.votes().order(\"chamber\", \"asc\").order(\"year\");\n\n\t//add multiple at once with a single call\n\tapi.votes().order([\"year\", \"desc\"], [\"chamber\", \"desc\"]);\n\tapi.votes().order({field:\"year\", direction:\"asc\"}, {field:\"chamber\", direction:\"asc\"});\n\n#### page(pagenumber, [pagesize])\n\nProvides control over the pages Sunlight Congress API returns to you.\n\n\tapi.votes().page(2, 5); //return page 2 of votes where the pagesize is 5 items.\n\n* pagenumber: which page to have returned.\n* pagesize: how many items to return on a page. Defaults to 20. Max is 50.\n\n#### search(q)\n\nProvides control over the search feature. On endpoints ending in /search, it checks that the query string is valid for full text search.\n\n\t// Senate hearings matching \"environment\"\n\tapi.hearings().filter(\"chamber\", \"senate\").search(\"environment\");\n\n\t//House floor updates matching \"committee of the whole\"\n\tapi.floorUpdates().filter(\"chamber\", \"house\").search(\"committee of the whole\");\n\n\t//Endpoints ending in /search can take multiple phrases.\n\t//Phrase must be wrapped in \" not '\n\n\t//Bills matching \"freedom of information\" and words starting with \"accountab\"\n\tapi.billsSearch.search(\"\\\"freedom of information\\\" accountab*\");\n\n\t//Bills with \"transparency\" and \"accountability\" within 5 words of each other\n\tapi.billsSearch.search('\"transparency accountability\"~5');\n\n* q: what to search for.\n\n### Full Text Search Endpoints\n\nEndpoints Included\n\n* billsSearch\n\n#### highlight([startTag, endTag])\n\nHighlights the text which matches the search wrapped in em tags, unless other tags are provided.\n\n\t// Bills with \"transparency\" and \"accountability\" within 5 words of each other\n\t// Highlighted in red\n\tapi.billsSearch()\n\t\t.search('\"transparency accountability\"~5')\n\t\t.highlight(\"<span style='color:red;'>\", \"</span>\");\n\n* startTag: the html tag to start the highlight. Defaults to <em>\n* endTag: the html tag to end the highlight. Defaults to </em>",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mcwhittemore/sunlight-congress-api/issues"
  },
  "bundleDependencies": [],
  "_id": "sunlight-congress-api@0.1.0",
  "_from": "sunlight-congress-api@^0.1.0"
}
