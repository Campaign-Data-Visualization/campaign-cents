{
  "name": "mysql-utilities",
  "version": "1.0.5",
  "author": {
    "name": "Timur Shemsedinov",
    "email": "timur.shemsedinov@gmail.com"
  },
  "description": "Utilities for node-mysql driver with specialized result types, introspection and other helpful functionality.",
  "keywords": [
    "mysql",
    "utilities",
    "introspection",
    "impress"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/tshemsedinov/node-mysql-utilities"
  },
  "main": "./utilities",
  "dependencies": {
    "mysql": "2.0.x"
  },
  "readmeFilename": "README.md",
  "readme": "![impress logo](http://habrastorage.org/storage3/747/830/b17/747830b1782bd95f28b8d05eff8e05d9.jpg)\r\n\r\n[Utilities](https://github.com/tshemsedinov/node-mysql-utilities) for [node-mysql driver](https://github.com/felixge/node-mysql) with specialized result types, introspection and other helpful functionality for [node.js](http://nodejs.org). Initially this utilities were part of [Impress](https://npmjs.org/package/impress) Application Server and extracted separately for use with other frameworks.\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install mysql-utilities\r\n```\r\n\r\n## Features\r\n\r\n  - MySQL Data Access Methods\r\n    - Query selecting single row: connection.queryRow(sql, values, callback)\r\n    - Query selecting scalar (single value): connection.queryValue(sql, values, callback)\r\n    - Query selecting column into array: connection.queryCol(sql, values, callback)\r\n    - Query selecting hash of records: connection.queryHash(sql, values, callback)\r\n    - Query selecting key/value hash: connection.queryKeyValue(sql, values, callback)\r\n  - MySQL Introspection Methods\r\n    - Get primary key metadata: connection.primary(table, callback)\r\n    - Get foreign key metadata: connection.foreign(table, callback)\r\n    - Get table constraints metadata: connection.constraints(table, callback)\r\n    - Get table fields metadata: connection.fields(table, callback)\r\n    - Get connection databases array: connection.databases(callback)\r\n    - Get database tables list for current db: connection.tables(callback)\r\n    - Get database tables list for given db: connection.databaseTables(database, callback)\r\n    - Get table metadata: connection.tableInfo(table, callback)\r\n    - Get table indexes metadata: connection.indexes(table, callback)\r\n    - Get server process list: connection.processes(callback)\r\n    - Get server global variables: connection.globalVariables(callback)\r\n    - Get server global status: connection.globalStatus(callback)\r\n    - Get database users: connection.users(callback)\r\n  - MySQL SQL Statements Autogenerating Methods\r\n    - Selecting record(s): connection.select(table, whereFilter, callback)\r\n    - Inserting record: connection.insert(table, row, callback)\r\n    - Updating record: connection.update(table, row, where, callback)\r\n    - Inserting or selecting record: connection.upsert(table, row, callback)\r\n    - Count records with filter: connection.count(table, whereFilter, callback)\r\n    - Delete record(s): connection.delete(table, whereFilter, callback)\r\n  - Events\r\n    - Catch any query execution: connection.on('query', function(err, res, fields, query) {});\r\n    - Catch errors: connection.on('error', function(err, query) {});\r\n    - Catch slow query execution: connection.on('slow', function(err, res, fields, query, executionTime) {});\r\n\r\n## Initialization\r\n\r\n  Utilities can be attached to connection using mix-ins:\r\n\r\n```js\r\n// Library dependencies\r\nvar mysql = require('mysql'),\r\n\tmysqlUtilities = require('utilities');\r\n\r\nvar connection = mysql.createConnection({\r\n\thost:     'localhost',\r\n\tuser:     'userName',\r\n\tpassword: 'secret',\r\n\tdatabase: 'databaseName'\r\n});\r\n\r\nconnection.connect();\r\n\r\n// Mix-in for Data Access Methods and SQL Autogenerating Methods\r\nmysqlUtilities.upgrade(connection);\r\n\r\n// Mix-in for Introspection Methods\r\nmysqlUtilities.introspection(connection);\r\n\r\n// Do something using utilities\r\nconnection.queryRow(\r\n\t'SELECT * FROM _Language where LanguageId=?', [3],\r\n\tfunction(err, row) {\r\n\t\tconsole.dir({queryRow:row});\r\n\t}\r\n);\r\n\r\n// Release connection\r\nconnection.end();\r\n```\r\n\r\n## Examples\r\n\r\nSingle row selection: connection.queryRow(sql, values, callback) returns hash as callback second parameter, field names becomes hash keys.\r\n```js\r\nconnection.queryRow('SELECT * FROM Language where LanguageId=?', [3], function(err, row) {\r\n\tconsole.dir({queryRow:row});\r\n\t/* Example:\r\n\t\tqueryRow: {\r\n\t\t\tLanguageId: 3,\r\n\t\t\tLanguageName: 'Russian',\r\n\t\t\tLanguageSign: 'ru',\r\n\t\t\tLanguageISO: 'ru',\r\n\t\t\tCaption: 'Русский'\r\n\t\t}\r\n\t*/\r\n});\r\n```\r\n\r\nSingle value selection: connection.queryValue(sql, values, callback) returns single value as callback second parameter (instead of array in array). For example, for Id selection by name with LIMIT 1 or count(*), max(field) etc.\r\n```js\r\nconnection.queryValue('SELECT LanguageName FROM Language where LanguageId=?', [8],\r\n\tfunction(err, name) {\r\n\tconsole.dir({queryValue:name});\r\n\t/* Example:\r\n\t\tqueryValue: 'Italiano'\r\n\t*/\r\n});\r\n```\r\n\r\nSingle column selection: connection.queryCol(sql, values, callback) returns array as callback second parameter.\r\n```js\r\nconnection.queryCol('SELECT LanguageSign FROM Language', [], function(err, result) {\r\n\tconsole.dir({queryCal:result});\r\n\t/* Example:\r\n\t\tqueryArray: [ 'de', 'en', 'es', 'fr', 'it', 'pl', 'ru', 'ua' ]\r\n\t*/\r\n});\r\n```\r\n\r\nHash selection: connection.queryHash(sql, values, callback) returns hash as callback second parameter, hash keyed by first field values from SQL statement.\r\n```js\r\nconnection.queryHash(\r\n\t'SELECT LanguageSign, LanguageId, LanguageName, Caption, LanguageISO FROM Language', [],\r\nfunction(err, result) {\r\n\tconsole.dir({queryHash:result});\r\n\t/* Example:\r\n\t\tqueryHash: {\r\n\t\t\ten: {\r\n\t\t\t\tLanguageSign: 'en',\r\n\t\t\t\tLanguageId: 2,\r\n\t\t\t\tLanguageName: 'English',\r\n\t\t\t\tCaption: 'Английский',\r\n\t\t\t\tLanguageISO: 'en' },\r\n\t\t\tru: {\r\n\t\t\t\tLanguageSign: 'ru',\r\n\t\t\t\tLanguageId: 3,\r\n\t\t\t\tLanguageName: 'Russian',\r\n\t\t\t\tCaption: 'Русский',\r\n\t\t\t\tLanguageISO: 'ru' },\r\n\t\t\tde: {\r\n\t\t\t\tLanguageSign: 'de',\r\n\t\t\t\tLanguageId: 7,\r\n\t\t\t\tLanguageName: 'Deutsch',\r\n\t\t\t\tCaption: 'Немецкий',\r\n\t\t\t\tLanguageISO: 'de' },\r\n\t\t\tit: {\r\n\t\t\t\tLanguageSign: 'it',\r\n\t\t\t\tLanguageId: 8,\r\n\t\t\t\tLanguageName: 'Italiano',\r\n\t\t\t\tCaption: 'Итальянский',\r\n\t\t\t\tLanguageISO: 'it'\r\n\t\t\t}\r\n\t\t}\r\n\t*/\r\n});\r\n```\r\n\r\nKey/value pair selection: connection.queryKeyValue(sql, values, callback) returns hash as callback second parameter, hash keyed by first field, values filled by second field.\r\n```js\r\nconnection.queryKeyValue(\r\n\t'SELECT LanguageISO, LanguageName FROM Language', [], function(err, keyValue) {\r\n\tconsole.dir({queryKeyValue:keyValue});\r\n\t/* Example:\r\n\t\tkeyValue: {\r\n\t\t\ten: 'English',\r\n\t\t\tru: 'Russian',\r\n\t\t\tuk: 'Ukrainian',\r\n\t\t\tes: 'Espanol',\r\n\t\t\tfr: 'Francais',\r\n\t\t\tde: 'Deutsch',\r\n\t\t\tit: 'Italiano',\r\n\t\t\tpl: 'Poliski'\r\n\t\t}\r\n\t*/\r\n});\r\n```\r\n\r\nGet primary key list with metadata: connection.primary(table, callback) returns metadata as callback second parameter.\r\n```js\r\nconnection.primary('Language', function(err, primary) {\r\n\tconsole.dir({primary:primary});\r\n\t/* Example:\r\n\t\tprimary: {\r\n\t\t\tTable: 'language',\r\n\t\t\tNon_unique: 0,\r\n\t\t\tKey_name: 'PRIMARY',\r\n\t\t\tSeq_in_index: 1,\r\n\t\t\tColumn_name: 'LanguageId',\r\n\t\t\tCollation: 'A',\r\n\t\t\tCardinality: 9,\r\n\t\t\tSub_part: null,\r\n\t\t\tPacked: null,\r\n\t\t\tNull: '',\r\n\t\t\tIndex_type: 'BTREE',\r\n\t\t\tComment: '',\r\n\t\t\tIndex_comment: ''\r\n\t\t}\r\n\t*/\r\n});\r\n```\r\n\r\nGet foreign key list with metadata: connection.foreign(table, callback) returns metadata as callback second parameter.\r\n```js\r\nconnection.foreign('TemplateCaption', function(err, foreign) {\r\n\tconsole.dir({foreign:foreign});\r\n\t/* Example:\r\n\t\tforeign: {\r\n\t\t\tfkTemplateCaptionLanguage: {\r\n\t\t\t\tCONSTRAINT_NAME: 'fkTemplateCaptionLanguage',\r\n\t\t\t\tCOLUMN_NAME: 'LanguageId',\r\n\t\t\t\tORDINAL_POSITION: 1,\r\n\t\t\t\tPOSITION_IN_UNIQUE_CONSTRAINT: 1,\r\n\t\t\t\tREFERENCED_TABLE_NAME: 'language',\r\n\t\t\t\tREFERENCED_COLUMN_NAME: 'LanguageId' }, \r\n\t\t\tfkTemplateCaptionTemplate: {\r\n\t\t\t\tCONSTRAINT_NAME: 'fkTemplateCaptionTemplate',\r\n\t\t\t\tCOLUMN_NAME: 'TemplateId',\r\n\t\t\t\tORDINAL_POSITION: 1,\r\n\t\t\t\tPOSITION_IN_UNIQUE_CONSTRAINT: 1,\r\n\t\t\t\tREFERENCED_TABLE_NAME: 'template',\r\n\t\t\t\tREFERENCED_COLUMN_NAME: 'TemplateId'\r\n\t\t\t}\r\n\t*/\r\n});\r\n```\r\n\r\nReferential constraints list with metadata: connection.constraints(table, callback).\r\n```js\r\nconnection.constraints('TemplateCaption', function(err, constraints) {\r\n\tconsole.dir({constraints:constraints});\r\n\t/* Example:\r\n\t\tconstraints: {\r\n\t\t\tfkTemplateCaptionLanguage: {\r\n\t\t\t\tCONSTRAINT_NAME: 'fkTemplateCaptionLanguage',\r\n\t\t\t\tUNIQUE_CONSTRAINT_NAME: 'PRIMARY',\r\n\t\t\t\tREFERENCED_TABLE_NAME: 'Language',\r\n\t\t\t\tMATCH_OPTION: 'NONE',\r\n\t\t\t\tUPDATE_RULE: 'RESTRICT',\r\n\t\t\t\tDELETE_RULE: 'CASCADE' },\r\n\t\t\tfkTemplateCaptionTemplate: {\r\n\t\t\t\tCONSTRAINT_NAME: 'fkTemplateCaptionTemplate',\r\n\t\t\t\tUNIQUE_CONSTRAINT_NAME: 'PRIMARY',\r\n\t\t\t\tREFERENCED_TABLE_NAME: 'Template',\r\n\t\t\t\tMATCH_OPTION: 'NONE',\r\n\t\t\t\tUPDATE_RULE: 'RESTRICT',\r\n\t\t\t\tDELETE_RULE: 'CASCADE'\r\n\t\t\t} \r\n\t\t}\r\n\t*/\r\n});\r\n```\r\n\r\nGet table fields with metadata: connection.fields(table, callback).\r\n```js\r\nconnection.fields('Language', function(err, fields) {\r\n\tconsole.dir({fields:fields});\r\n\t/* Example:\r\n\t\tfields: {\r\n\t\t\tLanguageId: {\r\n\t\t\t\tField: 'LanguageId',\r\n\t\t\t\tType: 'int(10) unsigned',\r\n\t\t\t\tCollation: null,\r\n\t\t\t\tNull: 'NO',\r\n\t\t\t\tKey: 'PRI',\r\n\t\t\t\tDefault: null,\r\n\t\t\t\tExtra: 'auto_increment',\r\n\t\t\t\tPrivileges: 'select,insert,update,references',\r\n\t\t\t\tComment: 'Id(EN),Код(RU)' },\r\n\t\t\tLanguageName: {\r\n\t\t\t\tField: 'LanguageName',\r\n\t\t\t\tType: 'varchar(32)',\r\n\t\t\t\tCollation: 'utf8_general_ci',\r\n\t\t\t\tNull: 'NO',\r\n\t\t\t\tKey: 'UNI',\r\n\t\t\t\tDefault: null,\r\n\t\t\t\tExtra: '',\r\n\t\t\t\tPrivileges: 'select,insert,update,references',\r\n\t\t\t\tComment: 'Name(EN),Имя(RU)'\r\n\t\t\t}, ...\r\n\t\t}\r\n\t*/\r\n});\r\n```\r\n\r\nGet database list for current connection: connection.databases(callback).\r\n```js\r\nconnection.databases(function(err, databases) {\r\n\tconsole.dir({databases:databases});\r\n\t/* Example:\r\n\t\tdatabases: [ 'information_schema', 'mezha', 'mysql', 'performance_schema', 'test' ]\r\n\t*/\r\n});\r\n```\r\n\r\nGet table list for current database: connection.tables(callback).\r\n```js\r\nconnection.tables(function(err, tables) {\r\n\tconsole.dir({tables:tables});\r\n\t/* Example:\r\n\t\ttables: {\r\n\t\t\tLanguage: {\r\n\t\t\t\tTABLE_NAME: 'Language',\r\n\t\t\t\tTABLE_TYPE: 'BASE TABLE',\r\n\t\t\t\tENGINE: 'InnoDB',\r\n\t\t\t\tVERSION: 10,\r\n\t\t\t\tROW_FORMAT: 'Compact',\r\n\t\t\t\tTABLE_ROWS: 9,\r\n\t\t\t\tAVG_ROW_LENGTH: 1820,\r\n\t\t\t\tDATA_LENGTH: 16384,\r\n\t\t\t\tMAX_DATA_LENGTH: 0,\r\n\t\t\t\tINDEX_LENGTH: 49152,\r\n\t\t\t\tDATA_FREE: 8388608,\r\n\t\t\t\tAUTO_INCREMENT: 10,\r\n\t\t\t\tCREATE_TIME: Mon Jul 15 2013 03:06:08 GMT+0300 (Финляндия (лето)),\r\n\t\t\t\tUPDATE_TIME: null,\r\n\t\t\t\tCHECK_TIME: null,\r\n\t\t\t\tTABLE_COLLATION: 'utf8_general_ci',\r\n\t\t\t\tCHECKSUM: null,\r\n\t\t\t\tCREATE_OPTIONS: '',\r\n\t\t\t\tTABLE_COMMENT: '_Language:Languages(EN),Языки(RU)'\r\n\t\t\t}, ...\r\n\t\t}\r\n\t*/\r\n});\r\n```\r\n\r\nGet table list for specified database: connection.databaseTables(database, callback).\r\n```js\r\nconnection.databaseTables(\"databaseName\", function(err, tables) {\r\n\tconsole.dir({databaseTables:tables});\r\n\t/* Example:\r\n\t\ttables: {\r\n\t\t\tLanguage: {\r\n\t\t\t\tTABLE_NAME: 'Language',\r\n\t\t\t\tTABLE_TYPE: 'BASE TABLE',\r\n\t\t\t\tENGINE: 'InnoDB',\r\n\t\t\t\tVERSION: 10,\r\n\t\t\t\tROW_FORMAT: 'Compact',\r\n\t\t\t\tTABLE_ROWS: 9,\r\n\t\t\t\tAVG_ROW_LENGTH: 1820,\r\n\t\t\t\tDATA_LENGTH: 16384,\r\n\t\t\t\tMAX_DATA_LENGTH: 0,\r\n\t\t\t\tINDEX_LENGTH: 49152,\r\n\t\t\t\tDATA_FREE: 8388608,\r\n\t\t\t\tAUTO_INCREMENT: 10,\r\n\t\t\t\tCREATE_TIME: Mon Jul 15 2013 03:06:08 GMT+0300 (Финляндия (лето)),\r\n\t\t\t\tUPDATE_TIME: null,\r\n\t\t\t\tCHECK_TIME: null,\r\n\t\t\t\tTABLE_COLLATION: 'utf8_general_ci',\r\n\t\t\t\tCHECKSUM: null,\r\n\t\t\t\tCREATE_OPTIONS: '',\r\n\t\t\t\tTABLE_COMMENT: '_Language:Languages(EN),Языки(RU)'\r\n\t\t\t}, ...\r\n\t\t}\r\n\t*/\r\n});\r\n```\r\n\r\nGet table metadata: connection.tableInfo(table, callback).\r\n```js\r\nconnection.tableInfo('Language', function(err, info) {\r\n\tconsole.dir({tableInfo:info});\r\n\t/* Example:\r\n\t\ttableInfo: {\r\n\t\t\tName: 'language',\r\n\t\t\tEngine: 'InnoDB',\r\n\t\t\tVersion: 10,\r\n\t\t\tRow_format: 'Compact',\r\n\t\t\tRows: 9,\r\n\t\t\tAvg_row_length: 1820,\r\n\t\t\tData_length: 16384,\r\n\t\t\tMax_data_length: 0,\r\n\t\t\tIndex_length: 49152,\r\n\t\t\tData_free: 9437184,\r\n\t\t\tAuto_increment: 10,\r\n\t\t\tCreate_time: Mon Jul 15 2013 03:06:08 GMT+0300 (Финляндия (лето)),\r\n\t\t\tUpdate_time: null,\r\n\t\t\tCheck_time: null,\r\n\t\t\tCollation: 'utf8_general_ci',\r\n\t\t\tChecksum: null,\r\n\t\t\tCreate_options: '',\r\n\t\t\tComment: ''\r\n\t\t}\r\n\t*/\r\n});\r\n```\r\n\r\nGet table indexes metadata: connection.indexes(table, callback).\r\n```js\r\nconnection.indexes('Language', function(err, info) {\r\n\tconsole.dir({tableInfo:info});\r\n\t/* Example:\r\n\t\tindexes: {\r\n\t\t\tPRIMARY: {\r\n\t\t\t\tTable: 'language',\r\n\t\t\t\tNon_unique: 0,\r\n\t\t\t\tKey_name: 'PRIMARY',\r\n\t\t\t\tSeq_in_index: 1,\r\n\t\t\t\tColumn_name: 'LanguageId',\r\n\t\t\t\tCollation: 'A',\r\n\t\t\t\tCardinality: 9,\r\n\t\t\t\tSub_part: null,\r\n\t\t\t\tPacked: null,\r\n\t\t\t\tNull: '',\r\n\t\t\t\tIndex_type: 'BTREE',\r\n\t\t\t\tComment: '',\r\n\t\t\t\tIndex_comment: '' },\r\n\t\t\takLanguage: {\r\n\t\t\t\tTable: 'language',\r\n\t\t\t\tNon_unique: 0,\r\n\t\t\t\tKey_name: 'akLanguage',\r\n\t\t\t\tSeq_in_index: 1,\r\n\t\t\t\tColumn_name: 'LanguageName',\r\n\t\t\t\tCollation: 'A',\r\n\t\t\t\tCardinality: 9,\r\n\t\t\t\tSub_part: null,\r\n\t\t\t\tPacked: null,\r\n\t\t\t\tNull: '',\r\n\t\t\t\tIndex_type: 'BTREE',\r\n\t\t\t\tComment: '',\r\n\t\t\t\tIndex_comment: ''\r\n\t\t\t}\r\n\t\t}\r\n\t*/\r\n});\r\n```\r\n\r\nGet MySQL process list: connection.processes(callback).\r\n```js\r\nconnection.processes(function(err, processes) {\r\n\tconsole.dir({processes:processes});\r\n\t/* Example:\r\n\t\tprocesses: [ {\r\n\t\t\tID: 62,\r\n\t\t\tUSER: 'mezha',\r\n\t\t\tHOST: 'localhost:14188',\r\n\t\t\tDB: 'mezha',\r\n\t\t\tCOMMAND: 'Query',\r\n\t\t\tTIME: 0,\r\n\t\t\tSTATE: 'executing',\r\n\t\t\tINFO: 'SELECT * FROM information_schema.PROCESSLIST'\r\n\t\t}, {\r\n\t\t\tID: 33,\r\n\t\t\tUSER: 'root',\r\n\t\t\tHOST: 'localhost:39589',\r\n\t\t\tDB: null,\r\n\t\t\tCOMMAND: 'Sleep',\r\n\t\t\tTIME: 1,\r\n\t\t\tSTATE: '',\r\n\t\t\tINFO: null\r\n\t\t} ]\r\n\t*/\r\n});\r\n```\r\n\r\nGet MySQL global variables: connection.globalVariables(callback)\r\n```js\r\nconnection.globalVariables(function(err, globalVariables) {\r\n\tconsole.dir({globalVariables:globalVariables});\r\n\t/* Example:\r\n\t\tglobalVariables: {\r\n\t\t\tMAX_PREPARED_STMT_COUNT: '16382',\r\n\t\t\tMAX_JOIN_SIZE: '18446744073709551615',\r\n\t\t\tHAVE_CRYPT: 'NO',\r\n\t\t\tPERFORMANCE_SCHEMA_EVENTS_WAITS_HISTORY_LONG_SIZE: '10000',\r\n\t\t\tINNODB_VERSION: '5.5.32',\r\n\t\t\tFLUSH_TIME: '1800',\r\n\t\t\tMAX_ERROR_COUNT: '64',\r\n\t\t\t...\r\n\t\t}\r\n\t*/\r\n});\r\n```\r\n\r\nGet MySQL global status: connection.globalStatus(callback)\r\n```js\r\nconnection.globalStatus(function(err, globalStatus) {\r\n\tconsole.dir({globalStatus:globalStatus});\r\n\t/* Example:\r\n\t\tglobalStatus: {\r\n\t\t\tABORTED_CLIENTS: '54',\r\n\t\t\tABORTED_CONNECTS: '2',\r\n\t\t\tBINLOG_CACHE_DISK_USE: '0',\r\n\t\t\tBINLOG_CACHE_USE: '0',\r\n\t\t\tBINLOG_STMT_CACHE_DISK_USE: '0',\r\n\t\t\tBINLOG_STMT_CACHE_USE: '0',\r\n\t\t\tBYTES_RECEIVED: '654871',\r\n\t\t\tBYTES_SENT: '212454927',\r\n\t\t\tCOM_ADMIN_COMMANDS: '594',\r\n\t\t\t...\r\n\t\t}\r\n\t*/\r\n});\r\n```\r\n\r\nGet MySQL user list: connection.users(callback)\r\n```js\r\nconnection.users(function(err, users) {\r\n\tconsole.dir({users:users});\r\n\t/* Example:\r\n\t\tusers: [\r\n\t\t\t{\r\n\t\t\t\tHost: 'localhost',\r\n\t\t\t\tUser: 'root',\r\n\t\t\t\tPassword: '*90E462C37378CED12064BB3388827D2BA3A9B689',\r\n\t\t\t\tSelect_priv: 'Y',\r\n\t\t\t\tInsert_priv: 'Y',\r\n\t\t\t\tUpdate_priv: 'Y',\r\n\t\t\t\tDelete_priv: 'Y',\r\n\t\t\t\tCreate_priv: 'Y',\r\n\t\t\t\tDrop_priv: 'Y',\r\n\t\t\t\tReload_priv: 'Y',\r\n\t\t\t\tShutdown_priv: 'Y',\r\n\t\t\t\tProcess_priv: 'Y',\r\n\t\t\t\tFile_priv: 'Y',\r\n\t\t\t\tGrant_priv: 'Y',\r\n\t\t\t\tReferences_priv: 'Y',\r\n\t\t\t\tIndex_priv: 'Y',\r\n\t\t\t\tAlter_priv: 'Y',\r\n\t\t\t\tShow_db_priv: 'Y',\r\n\t\t\t\tSuper_priv: 'Y',\r\n\t\t\t\tCreate_tmp_table_priv: 'Y',\r\n\t\t\t\tLock_tables_priv: 'Y',\r\n\t\t\t\tExecute_priv: 'Y',\r\n\t\t\t\tRepl_slave_priv: 'Y',\r\n\t\t\t\tRepl_client_priv: 'Y',\r\n\t\t\t\tCreate_view_priv: 'Y',\r\n\t\t\t\tShow_view_priv: 'Y',\r\n\t\t\t\tCreate_routine_priv: 'Y',\r\n\t\t\t\tAlter_routine_priv: 'Y',\r\n\t\t\t\tCreate_user_priv: 'Y',\r\n\t\t\t\tEvent_priv: 'Y',\r\n\t\t\t\tTrigger_priv: 'Y',\r\n\t\t\t\tCreate_tablespace_priv: 'Y',\r\n\t\t\t\tssl_type: '',\r\n\t\t\t\tssl_cipher: <Buffer >,\r\n\t\t\t\tx509_issuer: <Buffer >,\r\n\t\t\t\tx509_subject: <Buffer >,\r\n\t\t\t\tmax_questions: 0,\r\n\t\t\t\tmax_updates: 0,\r\n\t\t\t\tmax_connections: 0,\r\n\t\t\t\tmax_user_connections: 0,\r\n\t\t\t\tplugin: '',\r\n\t\t\t\tauthentication_string: ''\r\n\t\t\t}, ...\r\n\t\t]\r\n\t*/\r\n});\r\n```\r\n\r\nGenerate MySQL WHERE statement: connection.where(conditions), works synchronously, no callback. Returns WHERE statement for given JSON-style conditions.\r\n```js\r\nvar where = connection.where({\r\n\tid: 5,\r\n\tyear: \">2010\",\r\n\tprice: \"100..200\",\r\n\tlevel: \"<=3\",\r\n\tsn: \"*str?\",\r\n\tlabel: \"str\",\r\n\tcode: \"(1,2,4,10,11)\"\r\n});\r\nconsole.dir(where);\r\n// Output: \"id = 5 AND year > '2010' AND (price BETWEEN '100' AND '200') AND \r\n// level <= '3' AND sn LIKE '%str_' AND label = 'str' AND code IN (1,2,4,10,11)\"\r\n```\r\n\r\nGenerate SELECT statement: connection.select(table, whereFilter, callback)\r\n```js\r\nconnection.select('Language', '*', { LanguageId: \"1..3\" }, function(err, results) {\r\n\tconsole.dir({select:results});\r\n});\r\n```\r\n\r\nGenerate INSERT statement: connection.insert(table, row, callback)\r\n```js\r\nconnection.insert('Language', {\r\n\tLanguageName: 'Tatar',\r\n\tLanguageSign:'TT',\r\n\tLanguageISO:'TT',\r\n\tCaption:'Tatar'\r\n}, function(err, recordId) {\r\n\tconsole.dir({insert:recordId});\r\n});\r\n```\r\n\r\nGenerate UPDATE statement: connection.update(table, row, callback)\r\n```js\r\nconnection.update('Language', {\r\n\tLanguageId: 25,\r\n\tLanguageName:'Tatarca',\r\n\tLanguageSign:'TT',\r\n\tLanguageISO:'TT',\r\n\tCaption:'Tatarca'\r\n}, function(err, affectedRows) {\r\n\tconsole.dir({update:affectedRows});\r\n});\r\n```\r\n\r\nGenerate UPDATE statement with \"where\": connection.update(table, row, where, callback)\r\n```js\r\nconnection.update(\r\n\t'Language',\r\n\t{ LanguageSign:'TT' },\r\n\t{ LanguageId: 1 },\r\n\tfunction(err, affectedRows) {\r\n\t\tconsole.dir({update:affectedRows});\r\n\t}\r\n);\r\n```\r\n\r\nGenerate INSERT statement if record not exists or UPDATE if it exists: connection.upsert(table, row, callback)\r\n```js\r\nconnection.upsert('Language', {\r\n\tLanguageId: 25,\r\n\tLanguageName:'Tatarca',\r\n\tLanguageSign:'TT',\r\n\tLanguageISO:'TT',\r\n\tCaption:'Tatarca'\r\n}, function(err, affectedRows) {\r\n\tconsole.dir({upsert:affectedRows});\r\n});\r\n```\r\n\r\nGet record count: connection.count(table, whereFilter, callback)\r\n```js\r\nconnection.count('Language', { LanguageId: \">3\" }, function(err, count) {\r\n\tconsole.dir({count:count});\r\n\t/* Example:\r\n\t\tcount: 9\r\n\t*/\r\n});\r\n```\r\n\r\nGenerate DELETE statement: connection.delete(table, whereFilter, callback)\r\n```js\r\nconnection.delete('Language', { LanguageSign:'TT' }, function(err, affectedRows) {\r\n\tconsole.dir({delete:affectedRows});\r\n});\r\n```\r\n\r\n## Contributors\r\n\r\n  - Timur Shemsedinov (marcusaurelius)\r\n\r\n## License \r\n\r\nDual licensed under the MIT or RUMI licenses.\r\n\r\nCopyright (c) 2012-2013 MetaSystems &lt;timur.shemsedinov@gmail.com&gt;\r\n\r\nLicense: RUMI\r\n\r\nDo you know what you are?\r\nYou are a manuscript of a divine letter.\r\nYou are a mirror reflecting a noble face.\r\nThis universe is not outside of you.\r\nLook inside yourself;\r\neverything that you want,\r\nyou are already that.\r\n\r\nJalal ad-Din Muhammad Rumi\r\n\"Hush, Don't Say Anything to God: Passionate Poems of Rumi\"",
  "bugs": {
    "url": "https://github.com/tshemsedinov/node-mysql-utilities/issues"
  },
  "_id": "mysql-utilities@1.0.5",
  "dist": {
    "shasum": "e70eebabe4f59e9106bc5ac2d9603aef7e2a8052"
  },
  "_from": "mysql-utilities@*",
  "_resolved": "https://registry.npmjs.org/mysql-utilities/-/mysql-utilities-1.0.5.tgz"
}
